{"componentChunkName":"component---src-components-templates-page-template-js","path":"/posts/TIL/5","result":{"data":{"markdownRemark":{"html":"<h1>트랜지션의 특징</h1>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #777<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">div:hover</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> yellow<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> width 0.5s<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* width값이 변하면 0.5초동안 width값을 부드럽게 변화시키겠다. */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"images/2020-01-02-14-26.png\" alt=\"마우스 올리기 전\">\n마우스를 올리기전엔 박스가 이런 모양이다.\n<img src=\"images/2020-01-02-14-27.png\" alt=\"마우스 올린 후\">\n마우스를 올리고난 후엔 박스가 커지며 백그라운드가 노란색으로 변경된다.</p>\n<p><code class=\"language-text\">transition</code> 속성에 <code class=\"language-text\">width</code>값이 변할때 <code class=\"language-text\">0.5s</code>동안 변화시키겠다를 지정했기 때문에 마우스를 올렸을때 부드럽게 변화한다.\n만약에 <code class=\"language-text\">width</code>값 뿐만아니라 div의 다른값이 변했을때도 애니메이션 효과를 주고 싶다면 <code class=\"language-text\">transition: width 0.5s;</code> 대신 <code class=\"language-text\">transition: all 0.5s;</code>라고 지정하면 된다.</p>\n<h2>트랜지션을 트리거 하는 방법</h2>\n<ol>\n<li>위처럼 기본 <code class=\"language-text\">CSS</code>가 적용된 상태에서 <code class=\"language-text\">가상선택자</code>를 추가해서 적용된 <code class=\"language-text\">CSS</code> 속성 변경</li>\n<li><code class=\"language-text\">div</code>에 새로운 클래스명을 주어서 <code class=\"language-text\">div</code>에 새로운 <code class=\"language-text\">CSS</code>를 적용</li>\n</ol>\n<blockquote>\n<p>이처럼 transition은 같은 대상을 지칭하는 서로 다른 CSS rules(div와 div:hover)이 있고 어떤 속성(width)이 변경됬을때 transition(0.5s)이 트리거 될것인지를 지정해야한다.</p>\n</blockquote>\n<p><code class=\"language-text\">A</code>와 <code class=\"language-text\">B</code>라는 CSS규칙이 2개가 있을때 A의 어떤속성이 변경됬을때 B로 변경시킬건지 지정하는것이 <code class=\"language-text\">transition: ...</code> 이다.\n위 예제에선 <code class=\"language-text\">width</code>값이 변경되었을때 <code class=\"language-text\">A</code> CSS에서 <code class=\"language-text\">B</code> CSS로 <code class=\"language-text\">0.5s</code> 동안 스타일이 변경되게끔 설정했다.</p>\n<p><code class=\"language-text\">transition: width 0.5s;</code></p>\n<p><strong>딜레이를 주고 싶으면 transition: width 0.5s 1s; 와 같이 적용하면 된다. 마지막 1s는 1초뒤에 트랜지션이 실행됨을 의미한다.</strong></p>\n<h1>애니메이션의 특징</h1>\n<p>애니메이션은 다음과 같이 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/* 키프레임 이름 = 애니메이션 이름 */</span>\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> animationName</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">0%</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">100%</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 단일 속성 */</span>\n<span class=\"token selector\">.object</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">animation-name</span><span class=\"token punctuation\">:</span> animationName<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 키프레임의 이름 */</span>\n  <span class=\"token property\">animation-duration</span><span class=\"token punctuation\">:</span> 2s<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 애니메이션 지속시간 */</span>\n  <span class=\"token property\">animation-delay</span><span class=\"token punctuation\">:</span> 1s<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 애니메이션이 몇초 뒤에 실행? */</span>\n  <span class=\"token property\">animation-direction</span><span class=\"token punctuation\">:</span> alternate<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* 애니메이션을 0% -> 100%으로만 실행할건지? 100% -> 0%로 실행할건지? 아니면 0% -> 100% -> 0% 반복할건지?(alternate) */</span>\n  <span class=\"token property\">animation-iteration-count</span><span class=\"token punctuation\">:</span> 3<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 몇번 애니메이션을 반복할건지? */</span>\n  <span class=\"token property\">animation-play-state</span><span class=\"token punctuation\">:</span> paused<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 시작할때 멈춤 상태 */</span>\n  <span class=\"token property\">animation-timing-function</span><span class=\"token punctuation\">:</span> 1s<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 어떤 타이밍 함수로 애니메이션을 실행할건지 */</span>\n  <span class=\"token property\">animation-fill-mode</span><span class=\"token punctuation\">:</span> both<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 아래 참고 */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 속기형 */</span>\n<span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> name | duration | timing-function | delay | iteration-count | direction | fill-mode | play-state> [<span class=\"token punctuation\">,</span> ...]<span class=\"token punctuation\">;</span></code></pre></div>\n<h2>animation-fill-mode</h2>\n<p><code class=\"language-text\">none</code>, <code class=\"language-text\">forwards</code>, <code class=\"language-text\">backwards</code>, <code class=\"language-text\">both</code> 4가지 값이 존재한다.</p>\n<ol>\n<li><code class=\"language-text\">none</code>: 아무것도 지정하지 않는다.</li>\n<li><code class=\"language-text\">forwards</code>: 키프레임 100%에 도달했을때 그 상태를 유지한다.</li>\n<li><code class=\"language-text\">backwards</code>: 애니메이션이 시작하기도 전에 미리 키프레임 0%의 상태를 유지한 상태로 대기한다. 또한 애니메이션이 끝나면 처음 상태(키프레임 0%상태X)로 돌아온다.</li>\n<li><code class=\"language-text\">both</code>: <code class=\"language-text\">forwards</code>와 <code class=\"language-text\">backwards</code> 둘다 적용한다. (대기중일때 미리 키프레임 0%의 상태를 유지하며 키프레임 100%가 됬을때 그 상태를 유지한다.)</li>\n</ol>\n<h2>좀더 이해하기 쉽게 정리해보자.</h2>\n<p>CSS가 총 3개가 존재한다고 해보자. <code class=\"language-text\">처음적용된 CSS</code>, <code class=\"language-text\">키프레임 0%의 CSS</code>, <code class=\"language-text\">키프레임 100%의 CSS</code></p>\n<p>애니메이션이 실행되는 동안 CSS가 다음과 같이 적용된다.</p>\n<p><code class=\"language-text\">애니메이션 실행전(처음CSS)</code> - <code class=\"language-text\">애니메이션 실행 직후(키프레임 0%)</code> - <code class=\"language-text\">애니메이션 실행 완료(키프레임 100%)</code> - <code class=\"language-text\">애니메이션 실행 종료</code>의 4단계로 구분해보았다.</p>\n<p><code class=\"language-text\">none</code> : 처음 -> 0% -> 100% -> 처음</p>\n<p><code class=\"language-text\">forwards</code>: 처음 -> 0% -> 100% -> 100%</p>\n<p><code class=\"language-text\">backwards</code>: 0% -> 0% -> 100% -> 처음</p>\n<p><code class=\"language-text\">both</code>: 0% -> 0% -> 100% -> 100%</p>\n<p>아래 이미지에 보면 4가지 블록이 존재하는데 기본적으로 4개의 블록에 적용된 배경색은 <strong>주황색이다.</strong></p>\n<p>키프레임이 <code class=\"language-text\">0%</code>일때 배경색이 <strong>연보라색이며,</strong></p>\n<p>키프레임이 <code class=\"language-text\">100%</code>일때 배경색은 <strong>진한보라색이다.</strong></p>\n<p><img src=\"images/2020-01-02-14-48.png\">\n처음에 <code class=\"language-text\">none</code>과 <code class=\"language-text\">forwards</code>는 주황색(기본으로 적용된 CSS)이고 나머지는 연보라색(키프레임 0% CSS가 적용됨)이다.</p>\n<p><img src=\"images/2020-01-02-14-49.png\">\n그리고 나서 애니메이션이 시작됨과 동시에 4개의 블록 모두 연보라색으로 변경된다.\n키프레임 0%에 적용된 CSS가 <code class=\"language-text\">background: 연보라</code> 이기떄문이다.</p>\n<p><img src=\"images/2020-01-02-14-50-09.png\">\n키프레임 100%에서 4개의 블록 모두 진한 보라색으로 변경된다.</p>\n<p><img src=\"images/2020-01-02-14-59-57.png\">\n키프레임 100%에서 조금 시간이 지나면(애니메이션이 종료되면) <code class=\"language-text\">none</code>과 <code class=\"language-text\">backwards</code>는 다시 처음상태로 돌아간다.\n<code class=\"language-text\">backwards</code>라는 이름에서 유추할수 있듯이, <strong>다시 되돌아간다 라고 기억하면 될것같다.</strong></p>\n<p>하지만 <code class=\"language-text\">forwards</code>와 <code class=\"language-text\">both</code>는 키프레임 100%의 CSS가 적용된 상태로 유지된다.\n<code class=\"language-text\">forwards</code>라는 이름에서 유추할 수 있듯이, <strong>앞으로 전진된 상태 그대로를 유지한다고 기억하자.</strong></p>\n<p><code class=\"language-text\">both</code>에는 <code class=\"language-text\">forwards</code>가 포함되어있으니까 이것도 당연히 마지막 상태가 유지된다고 이해할수있다.</p>\n<blockquote>\n<p>애니메이션이 역방향으로 진행될때 timing function도 역으로 적용된다. 속도가 빠르다가 느려지는 애니메이션이 역방향으로 진행되면 느리다가 빨라진다.</p>\n</blockquote>\n<h1>CSS Animation VS Transition</h1>\n<p>그래서 애니메이션과 트랜지션의 차이점이 뭔데? 라고 생각할 수 있다.</p>\n<p>애니메이션이 실행되는동안,</p>\n<p>트랜지션은 <code class=\"language-text\">A</code>라는 상태와 <code class=\"language-text\">B</code>라는 상태 딱 두가지의 상태만 적용할수있다.\n반면에, 애니메이션은 <code class=\"language-text\">A</code>,<code class=\"language-text\">B</code>,<code class=\"language-text\">C</code>,<code class=\"language-text\">D</code>..등 여러가지의 상태를 적용할수있다.</p>\n<p>또한 트랜지션은 애니메이션을 반복하거나 애니메이션이 끝난 상태를 유지한다던지 뭐 이런 고급기능들을 사용할 수 없다.</p>\n<p>또한 트랜지션은 새롭게 클래스명을 추가하던지 마우스를 <code class=\"language-text\">hover</code>하던지 해당 엘리먼트의 속성에 변경이 일어나야만 애니메이션이 시작되는데,\n애니메이션은 그냥 시작 시킬 수 있다.</p>\n<p>그래서 간단하게 요약해보자면, <code class=\"language-text\">트랜지션</code>은 간단하게 애니메이션을 사용하고 싶을때 사용하고 좀 더 디테일하게 애니메이션을 다뤄야 한다면 <code class=\"language-text\">키프레임</code>과 함께 <code class=\"language-text\">CSS애니메이션</code>을 사용하도록 하자.</p>","frontmatter":{"path":"/posts/TIL/5","title":"CSS 트랜지션과 애니메이션","date":"January 02, 2020"}}},"pageContext":{}}}