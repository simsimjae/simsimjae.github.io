{"componentChunkName":"component---src-components-templates-page-template-js","path":"/posts/TIL/3","result":{"data":{"markdownRemark":{"html":"<h1>Fragments</h1>\n<p>한마디로 <code class=\"language-text\">Fragments</code>란 쿼리의 일부분을 재활용 가능한 단위로 나눠놓은것이다.\n이 예제에서 우리는 <code class=\"language-text\">blog-post.js</code>라고 하는 템플릿 파일을 사용할것이다.\n이 템플릿 파일로 블로그의 게시글들을 찍어낼수 있다.</p>\n<p>템플릿 파일 안에는 포스트를 불러오기 위한 쿼리와 그걸 보여주기 위한 마크업이 존재한다.\n포스트 내용을 불러오기 위한 <code class=\"language-text\">GraphQL</code> 쿼리는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query($id: String!) {\n    post: postsJson(id: { eq: $id }) {\n      title\n      slug\n      content\n      publishDate(formatString: \"MMMM DD, YYYY\")\n      tags\n      author {\n        slug\n        name\n        biography\n      }\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 쿼리를 살펴보면 <code class=\"language-text\">post</code>를 위한 영역과 <code class=\"language-text\">author</code>를 위한 영역이 분리되어 있다. 위 쿼리를 다음과 같이 두개의 <code class=\"language-text\">프래그먼트</code>로 쪼갤수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  fragment postFields on PostsJson {\n    slug\n    title\n    content\n    publishDate(formatString: \"MMMM DD, YYYY\")\n    tags\n  }\n\n  fragment authorFields on AuthorsJson {\n    slug\n    name\n    biography\n  }\n\n  query($id: String!) {\n    post: postsJson(id: { eq: $id }) {\n      ...postFields\n      author {\n        ...authorFields\n      }\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">postFields</code>와 <code class=\"language-text\">authorFields</code>라고 하는 두개의 프래그먼트로 나눴고 쿼리문 안에서 두개의 프래그먼트를 스프레드 연산자를 통해서 뿌려주고 있다.\n<strong>이제 포스트에 대한 쿼리문 작성은 끝났다.</strong></p>\n<p>그런데, 만약에 <code class=\"language-text\">author</code>의 정보를 보여주기 위한 쿼리를 또 작성해야 한다고 생각해보자.\n이 쿼리문은 <code class=\"language-text\">post</code>를 위한 쿼리문과 별로 다를게 없을것이다. 왜냐면 두 쿼리에서 필요한 정보가 거의 비슷할것이기 때문이다.\n다음은 <code class=\"language-text\">blog-author.js</code> 템플릿에서 작성자의 정보를 보여주기 위한 쿼리문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query($id: String!) {\n    post: authorsJson(id: { eq: $id }) {\n      slug\n      name\n      biography\n      posts {\n        title\n        slug\n        content\n        publishDate(formatString: \"MMMM DD, YYYY\")\n        tags\n      }\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>Gastby에서 fragments를 내보내기</h1>\n<p>이 쿼리문에서 프래그먼트로 쿼리를 분리한다고 해도 아까 작성한 <code class=\"language-text\">post</code>의 프래그먼트들과 별로 다를것이 없을것이다.\n그러니까 <code class=\"language-text\">author</code>를 위한 새로운 프래그먼트를 또 만들지 말고 아까 만들어둔 <strong>프래그먼트를 가져와서 재사용하자.</strong></p>\n<p><code class=\"language-text\">gastby</code> 공식문서에 있는 <code class=\"language-text\">graphql</code>부분을 보면 <code class=\"language-text\">fragments</code>에 대해서 다음과 같이 설명한다.</p>\n<blockquote>\n<p>Fragments are a way to save frequently used queries for re-use. To create a fragment, define it in a query and export it as a named export from any file Gatsby is aware of. A fragment is available for use in any other GraphQL query, regardless of location in the project. Fragments defined in a Gatsby project are global, so names must be unique.</p>\n</blockquote>\n<p>대충 해석해보자.</p>\n<ol>\n<li>프래그먼트는 쿼리문 안에서 작성되어야 한다.</li>\n<li>프래그먼트는 <code class=\"language-text\">named export</code> 방식으로 내보내져야한다.</li>\n<li>프래그먼트는 프로젝트 위치에 상관없이 다른 <code class=\"language-text\">GraphQL</code> 쿼리문에서 재사용가능하다.</li>\n<li>프래그먼트는 <code class=\"language-text\">Gastby</code> 프로젝트에서 글로벌로 세팅되기 때문에, 이름이 <code class=\"language-text\">unique</code>해야한다.</li>\n</ol>\n<h2>그래서 어디에 프래그먼트를 작성해야 하고, 어떤식으로 써야 하는데??</h2>\n<p><code class=\"language-text\">blog-post.js</code>와 <code class=\"language-text\">blog-author.js</code> 라고 하는 두개의 템플릿 파일에서 아까 만든 두개의 프래그먼트를 사용하기위해, <code class=\"language-text\">src</code>에 <code class=\"language-text\">fragments.js</code>라고 하는 파일을 생성한다.\n<strong>프래그먼트를 하나의 파일에 집중시킬건지 분산시킬건지는 너의 팀과 프로젝트에 따라 알아서 결정해라.</strong></p>\n<p><code class=\"language-text\">fragments.js</code>파일에 다음과 같이 두개의 프래그먼트를 붙여 넣자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> postFields <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  fragment postFields on PostsJson {\n    slug\n    title\n    content\n    publishDate(formatString: \"MMMM DD, YYYY\")\n    tags\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> authorFields <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  fragment authorFields on AuthorsJson {\n    slug\n    name\n    biography\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다시 한번 말하지만 프래그먼트의 이름은 유일해야한다.\n<code class=\"language-text\">global</code>하게 프래그먼트가 <code class=\"language-text\">export</code>되기 때문에 프로젝트 내의 어떤 쿼리문 안에서도 이 프래그먼트를 재활용 할 수 있다.</p>\n<blockquote>\n<p>필드가 몇개 없는 부분을 프래그먼트로 만드는건 오히려 가성비가 떨어진다. 수십, 수백개의 필드가 있는 쿼리의 일부를 프래그먼트화 한다면 아주 가성비가 좋은 분리가 될 수 있다.</p>\n</blockquote>\n<p><a href=\"https://medium.com/flatiron-labs/using-graphql-fragments-across-multiple-templates-in-gatsbyjs-7731a2d28bbd\">출처</a></p>","frontmatter":{"path":"/posts/TIL/3","title":"GraphQL의 Fragments란 무엇인가?","date":"January 02, 2020"}}},"pageContext":{}}}